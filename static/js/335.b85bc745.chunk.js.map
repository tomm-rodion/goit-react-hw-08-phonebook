{"version":3,"file":"static/js/335.b85bc745.chunk.js","mappings":"kTAIaA,EAAiBC,EAAAA,EAAAA,IAAH,6MAWdC,EAAWD,EAAAA,EAAAA,KAAH,+BACjBE,EAAAA,EAAAA,OAESC,GAAYH,EAAAA,EAAAA,GAAOI,EAAAA,EAAPJ,CAAH,oFAITK,GAAaL,EAAAA,EAAAA,GAAOM,EAAAA,EAAPN,CAAH,4OACnBO,EAAAA,G,wJCZSC,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MA4BjB,IAAMC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,MAAO,GACPC,SAAU,IAEZC,iBAAkBC,EAAAA,GAClBC,SAhCF,SAAsBC,EAAtB,GAA8C,IAAdC,EAAa,EAAbA,UAC9BX,GACEY,EAAAA,EAAAA,IAAM,CACJP,MAAOK,EAAOL,MACdC,SAAUI,EAAOJ,YAGlBO,SACAC,MAAK,kBACJC,IAAAA,OAAAA,QAAwB,kCAAmC,CACzDC,QAAS,IACTC,SAAU,QAHR,IAMLC,OAAM,kBACLH,IAAAA,OAAAA,QACE,mFACA,CACEC,QAAS,IACTC,SAAU,QALT,IASTN,GACD,IAWD,OACE,UAAC,KAAD,CAAUF,SAAUP,EAAOiB,aAA3B,WACE,SAAC,KAAD,CACEC,UAAQ,EACRC,aAAa,MACbC,WAAS,EACTC,GAAG,QACHC,KAAK,QACLC,MAAM,QACNC,YAAY,sBACZC,MAAOzB,EAAOQ,OAAOL,MACrBuB,SAAU1B,EAAO2B,aACjBC,MAAO5B,EAAO6B,QAAQ1B,OAAS2B,QAAQ9B,EAAO+B,OAAO5B,OACrD6B,WAAYhC,EAAO6B,QAAQ1B,OAASH,EAAO+B,OAAO5B,SAEpD,SAAC,KAAD,CACEe,UAAQ,EACRC,aAAa,MACbC,WAAS,EACTC,GAAG,WACHC,KAAK,WACLC,MAAM,WACNC,YAAY,WACZC,MAAOzB,EAAOQ,OAAOJ,SACrBsB,SAAU1B,EAAO2B,aACjBC,MAAO5B,EAAO6B,QAAQzB,UAAY0B,QAAQ9B,EAAO+B,OAAO3B,UACxD4B,WAAYhC,EAAO6B,QAAQzB,UAAYJ,EAAO+B,OAAO3B,YAEvD,SAAC,KAAD,CAAYgB,WAAS,EAACa,KAAK,SAA3B,qBAKL,E,mBChFYC,E,OAAkB7C,EAAAA,IAAH,6MCa5B,EAXc,WACZ,OACE,UAAC6C,EAAD,YACE,SAACC,EAAA,EAAD,WACE,wCAEF,SAACtC,EAAD,MAGL,C,+HCXYuC,EAA6BC,EAAAA,KAAaC,MAAM,CAC3DhB,KAAMe,EAAAA,GACI,+DACPnB,SAAS,0BACZf,MAAOkC,EAAAA,GACG,oBACPlC,MAAM,uBACNe,SAAS,0BACZd,SAAUiC,EAAAA,GACA,uBACPE,IAAI,EAAG,qDACPrB,SAAS,4BAGDZ,EAAwB+B,EAAAA,KAAaC,MAAM,CACtDnC,MAAOkC,EAAAA,GACG,oBACPlC,MAAM,uBACNe,SAAS,0BACZd,SAAUiC,EAAAA,GACA,uBACPE,IAAI,EAAG,qDACPrB,SAAS,4BAMDsB,EAASH,EAAAA,KAAaC,MAAM,CACvChB,KAAMe,EAAAA,KAAaE,IAAI,EAAG,cAAcE,IAAI,GAAI,aAAavB,WAC7DwB,OAAQL,EAAAA,KAELE,IAAI,GAAG,wCACPE,IAAI,IAAI,uCACRE,QARH,2GAQwB,uDACrBzB,Y","sources":["components/RegisterForm/RegisterForm.styled.jsx","components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.styled.jsx","pages/LoginPage/LoginPage.jsx","utils/validationSchema.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Button, TextField } from '@mui/material';\nimport { ContainerForm, btn } from 'components/Style/mixins';\n\nexport const WraperAuthForm = styled.div`\n  display: grid;\n  place-items: center;\n  padding: 40px;\n  border-radius: 8px;\n  background-color: #ededf2;\n  width: fit-content;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const AuthForm = styled.form`\n  ${ContainerForm()}\n`;\nexport const AuthField = styled(TextField)`\n  border-bottom: 3px solid #10567b;\n  border-radius: 5px;\n`;\nexport const AuthButton = styled(Button)`\n  ${btn}\n  background-color:#f2f5f7;\n  color: #10567b;\n  border: 1px solid #10567b;\n  padding: 10px 0;\n  font-size: 20px;\n  &:hover {\n    background-color: #dadddc;\n    color: #10567b;\n    scale: 1.1;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\nimport Notiflix from 'notiflix';\nimport {\n  AuthButton,\n  AuthField,\n  AuthForm,\n} from 'components/RegisterForm/RegisterForm.styled';\nimport { validationLogInSchema } from 'utils/validationSchema';\nimport { useFormik } from 'formik';\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  function handleSubmit(values, { resetForm }) {\n    dispatch(\n      logIn({\n        email: values.email,\n        password: values.password,\n      })\n    )\n      .unwrap()\n      .then(() =>\n        Notiflix.Notify.success('You have successfully logged in', {\n          timeout: 3000,\n          distance: '60px',\n        })\n      )\n      .catch(() =>\n        Notiflix.Notify.failure(\n          'Oops Something went wrong. Reload the page or check the fields: email, password!',\n          {\n            timeout: 3000,\n            distance: '60px',\n          }\n        )\n      );\n    resetForm();\n  }\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema: validationLogInSchema,\n    onSubmit: handleSubmit,\n  });\n\n  return (\n    <AuthForm onSubmit={formik.handleSubmit}>\n      <AuthField\n        required\n        autoComplete=\"off\"\n        fullWidth\n        id=\"email\"\n        name=\"email\"\n        label=\"Email\"\n        placeholder=\"jacob12345@mail.com\"\n        value={formik.values.email}\n        onChange={formik.handleChange}\n        error={formik.touched.email && Boolean(formik.errors.email)}\n        helperText={formik.touched.email && formik.errors.email}\n      />\n      <AuthField\n        required\n        autoComplete=\"off\"\n        fullWidth\n        id=\"password\"\n        name=\"password\"\n        label=\"Password\"\n        placeholder=\"Jacob123\"\n        value={formik.values.password}\n        onChange={formik.handleChange}\n        error={formik.touched.password && Boolean(formik.errors.password)}\n        helperText={formik.touched.password && formik.errors.password}\n      />\n      <AuthButton fullWidth type=\"submit\">\n        Login\n      </AuthButton>\n    </AuthForm>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const WraperLoginPage = styled.div`\n  display: grid;\n  place-items: center;\n  padding: 40px;\n  border-radius: 8px;\n  background-color: #ededf2;\n  width: fit-content;\n  margin-left: auto;\n  margin-right: auto;\n`;\n","import { LoginForm } from 'components/LoginForm/LoginForm';\nimport { Helmet } from 'react-helmet';\nimport { WraperLoginPage } from './LoginPage.styled';\n\nconst Login = () => {\n  return (\n    <WraperLoginPage>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <LoginForm />\n    </WraperLoginPage>\n  );\n};\n\nexport default Login;\n","import * as yup from 'yup';\n\nexport const validationRegistrateSchema = yup.object().shape({\n  name: yup\n    .string('Name may contain only letters, apostrophe, dash and spaces.')\n    .required('This field is required'),\n  email: yup\n    .string('Enter your email')\n    .email('Enter a valid email')\n    .required('This field is required'),\n  password: yup\n    .string('Enter your password')\n    .min(8, 'Password should be of minimum 8 characters length')\n    .required('This field is required'),\n});\n\nexport const validationLogInSchema = yup.object().shape({\n  email: yup\n    .string('Enter your email')\n    .email('Enter a valid email')\n    .required('This field is required'),\n  password: yup\n    .string('Enter your password')\n    .min(8, 'Password should be of minimum 8 characters length')\n    .required('This field is required'),\n});\n\nconst phoneRegExp =\n  /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n\nexport const schema = yup.object().shape({\n  name: yup.string().min(2, 'Too Short!').max(15, 'Too Long!').required(),\n  number: yup\n    .string()\n    .min(2, <em>Too Short!</em>)\n    .max(15, <em>Too Long!</em>)\n    .matches(phoneRegExp, <em>Phone number is not valid</em>)\n    .required(),\n});\n"],"names":["WraperAuthForm","styled","AuthForm","ContainerForm","AuthField","TextField","AuthButton","Button","btn","LoginForm","dispatch","useDispatch","formik","useFormik","initialValues","email","password","validationSchema","validationLogInSchema","onSubmit","values","resetForm","logIn","unwrap","then","Notiflix","timeout","distance","catch","handleSubmit","required","autoComplete","fullWidth","id","name","label","placeholder","value","onChange","handleChange","error","touched","Boolean","errors","helperText","type","WraperLoginPage","Helmet","validationRegistrateSchema","yup","shape","min","schema","max","number","matches"],"sourceRoot":""}